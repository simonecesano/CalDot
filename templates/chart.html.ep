% layout 'default';
% title 'Welcome';
%= javascript '/js/calendar.js'
%= javascript '/js/textwrap.js'
<script>
  $(function(){
      var templates = {};

      var collide = function(r1, r2){
	  return !(r2.left > r1.right || 
		   r2.right < r1.left || 
		   r2.top > r1.bottom ||
		   r2.bottom < r1.top);
      }
      
      $(("[type='text/x-handlebars-template']" )).each(function(){
	  var id = $(this).attr('id').replace(/\W*template/i, '').replace(/\W+/, '_')
	  templates[id] = Handlebars.compile($(this).html());
      });
      $('#save').click(function(){
	  var html = d3.select("#d3")
	      .attr("version", 1.1)
	      .attr("xmlns", "http://www.w3.org/2000/svg")
	      .node().parentNode.innerHTML;
	  var blob = new Blob([html], {type: "image/svg+xml"});
	  saveAs(blob, "myProfile.svg");
      })
      $('#submit').click(function(){
	  var d = filter_data(data, {
	      owner: $('#pov_owner').val()
	  } );
	  set_positions(d);
	  draw_chart(d)
      })

      // ------------------------------------------------------------------------------
      // calendar creation starts here
      // ------------------------------------------------------------------------------

      function filter_data (data, filter) {
	  if (filter.owner) {
	      var re = new RegExp (filter.owner, 'i');
	      data = _.filter(data, function(e, i){
		  return e.owner && e.owner.match(re)
	      })
	  }
	  if (filter.min_date) {
	      data = _.filter(data, function(e, i) {
		  return e.date >= filter.min_date;
	      })
	  }
	  return data;
      }
      
      var data = JSON.parse(localStorage.getItem('calendar'));
      var cal = new Calendar(data);

      data = cal.data();
      function set_positions(data){
	  _.each(data, function(e, i){
	      var x = i % 2 ? 50 : 80;
	      // var p = ((i % 4) < 2) ? 1 : -1;
	      var p = (i % 2) ? 1 : -1;
	      var s = ((i % 4) < 2) ? 0 : -40;
	      // e.pos_y  = x * p;
	      // e.text_y = x * p + s;
	      e.pos_y  = 50;
	      e.text_y = 50;
	  });
      };

      $('#people').html(templates.people_select({ people: cal.people() }))

      set_positions(data);
      
      function draw_chart (data, options){
	  var min_date = cal.min_date;
	  var max_date = cal.max_date;
	  var scales = { min: $('#min_scale').val(), maj: $('#maj_scale').val() }

	  var time_chunk = { 'YYYY' : 'year', 'MMM': 'month', 'WW': 'week', 'DD': 'day', 'HH': 'hour' };
	  
	  var start_scale = moment(min_date).clone().startOf(time_chunk[scales.min]);
	  var end_scale = moment(max_date).clone().endOf(time_chunk[scales.min]);
	  
	  var chunk_count = Math.floor(moment.duration(end_scale.diff(start_scale)).as(time_chunk[scales.min]))
	  
	  var dot_radius = 10;
	  
	  var chunks = {};
	  _.each(['min', 'maj'], function(scale_type) {
	      var last_chunk = start_scale.clone();
	      chunks[scale_type] = [];
	      while (last_chunk.unix() < end_scale.unix()) {
		  var start = last_chunk.clone()
		  var end   = start.clone().endOf(time_chunk[scales[scale_type]]);
		  if (end.unix() > end_scale.unix()) { end = end_scale.clone() }
		  chunks[scale_type].push({
		      start:    start,
		      end:      end,
		      duration: Math.round(moment.duration(end.diff(start)).asSeconds() ), 
		      name:     start.format(scales[scale_type]),
		      format: scales[scale_type]
		  });
		  last_chunk = end.clone().add(1, 'seconds');
	      };
	  });
	  
	  
	  
	  var width = $('#chart').width();
	  d3.select("#chart").html('');
	  var svg = d3.select("#chart").append("svg")
	      .attr("width", width)
	      .attr("height", 800)
	      .attr('id', 'd3')
	      .style("background-color", "#eeeeee");

	  var ref_bbox = svg.node().getBoundingClientRect()
	  
	  var x_scale = d3.scaleLinear()
	      .domain([start_scale.unix(), end_scale.unix()])
	      .range([20, width-20]);
	  
	  
	  var chunk_y = 10; var chunk_height = 40;
	  
	  _.each(['maj', 'min'], function(scale_type) {
	      var chunk_class = scale_type + '_chunk';
	      
	      svg.selectAll('rect.' + chunk_class)
		  .data(chunks[scale_type])                        
		  .enter()                           
		  .append("rect")
		  .attr("x", function(d){ return x_scale(d.start.unix()) })
		  .attr("y", chunk_y)
		  .attr("width", function(d){ return x_scale(d.end.unix()) - x_scale(d.start.unix()) })
		  .attr("height", chunk_height)
		  .style("fill", function(d){ return '#bbbbbb' })
		  .style("stroke", function(d){ return "#eeeeee" })
		  .attr("class", chunk_class)
		  .attr("stroke-width", 3)
	      
	      svg.selectAll("text." + chunk_class)
		  .data(chunks[scale_type])                        
		  .enter()                           
		  .append('text')
		  .attr('class', "month")
		  .attr('text-anchor', "middle")
		  .attr("x", function(d){ return x_scale(d.start.unix()) + (x_scale(d.end.unix()) - x_scale(d.start.unix())) / 2  })
		  .attr("y", chunk_y + 25)
		  .style("color", "white")
		  .attr("class", chunk_class)
		  .text( function (d) { return d.name })
	      ;
	      chunk_y = chunk_y + chunk_height; 
	  });
	  
	  
	  // timeline
	  var baseline_y = 150 
	  
	  svg.append("line")
	      .attr("x1", 10)
	      .attr("x2", width - 10)
	      .attr("y1", baseline_y)
	      .attr("y2", baseline_y)
	      .attr("stroke-width", 1)
	      .attr("stroke", '#999999');
	  
	  var task_groups = svg.selectAll("g.task")                  
	      .data(data)                        
	      .enter()                           
	      .append("g")
	      .attr("class", 'task')
	      .attr("t_id", function(d, i){ return i });

	      

	  // lines
	  task_groups.append("line").attr('class', "line")
	      .attr("x1", function(d) { return x_scale(moment(d.date).unix()) })
	      .attr("x2", function(d, e) { return x_scale(moment(d.date).unix()) })
	      .attr("y2", function(d) { return baseline_y })
	      .attr("y1", function(d, i) { return baseline_y + 60 })
	      .style("stroke-width", 1)
	      .style("stroke", 'black')
	  ;
	  // task dots
	  task_groups.append("circle")
	      .attr("cx", function(d) { return x_scale(moment(d.date).unix()) })  
	      .attr("cy", function(d) { return baseline_y })
	      .attr("r",  function(d) { return dot_radius })
	      .style("fill",function(d){ return 'red' })
	      .style("stroke-width", 1)
	      .style("stroke", 'white')
	  ;

	  task_groups.append("g").attr("class", 'caption');

	  // task text
	  var caption_groups = svg.selectAll("g.caption")
	  caption_groups.append("text").attr('text-anchor', "middle")
	      .attr("x", function(d, j) { return x_scale(moment(d.date).unix()) })
	      .attr("y", function(d, i) {
		  return 1 || !(i % 2) ? baseline_y + d.text_y + 10
		      : baseline_y - d.text_y - 30
	      })
	      .attr('class', 'task')
	      .style("font-size", "10px")
	      .text( function (d) { return d.name })
	  ;

	  // task date
	  caption_groups.append("text").attr('class', "date").attr('text-anchor', "middle")
	      .attr("x", function(d) { return x_scale(moment(d.date).unix()) })
	      .attr("y", function(d, i) { return 1 || !(i % 2) ? baseline_y + d.text_y + 25
					  : baseline_y - d.text_y - 10 ; })
	      .attr('class', 'date')
	      .style("font-size", "10px")
	      .text( function (d) { return moment(d.date).format('D MMM') })
	      .each(function(d, i, e, f){
	      })
	  ;
	  caption_groups.on('click', function(d){
	      var z = d3.select(this).style('z-index') ? parseInt(d3.select(this).style('z-index')) + 1 : 0;
	      d3.select(this).style('z-index', z)
	      console.log(d3.select(this).style('z-index'))
	  })

	  caption_groups.call(layout_03)

	  d3.selectAll('line.line').each(function(e, i){
	      var n = d3.select(this.parentNode).select('.caption').node();
	      var top = n.getBoundingClientRect().top - ref_bbox.top;
	      d3.select(this).attr('y1', top)
	      console.log(this);
	      // var p = this.parentNode;
	      // var g = this.cloneNode(true);
	      // this.remove(); p.appendChild(g);
	  });
	  caption_groups.call(rect_around)
	  task_groups.each(function(e, i){ e.rect = this.getBoundingClientRect() });
	  task_groups.sort(function(a, b){ return b.rect.bottom - a.rect.bottom || b.rect.right - a.rect.right })
      };
      draw_chart(data);
  })
</script>
<div id="chart">
</div>
<style>
  .form-group { padding-right: 1em; margin-right: 1em;  border-right: thin solid lightgrey  }
</style>
<div id="form" class="form-inline">
  <p /><hr /><p />
    
  <div class="form-group">
    <label for="seasons">Collapse seasons</label><br />
    <label class="radio-inline">
      <input type="radio" name="collapse" id="collapse_1" value="subjective" checked> No - separate
    </label>
    <label class="radio-inline">
      <input type="radio" name="collapse" id="collapse_2" value="general"> Yes - on a single line
    </label>
  </div>
  <div class="form-group">
    <label for="maj_scale">Primary scale</label><br/>
    <select class="field_selector" id="maj_scale" name="maj_scale">
      <option selected value="YYYY">Year</option>
      <option value="MMM">Month</option>
      <option value="WW">Week</option>
    </select>
  </div>
  <div class="form-group">
    <label for="min_scale">Secondary scale</label><br/>
    <select class="field_selector" id="min_scale" name="min_scale">
      <option selected value="MMM">Month</option>
      <option value="WW">Week</option>
      <option value="DD">Day</option>
      <option value="HH">Hour</option>
    </select>
  </div>
  <div class="form-group">
    <label for="min_date">Calendar start</label><br/>
    <input data-provide="datepicker-inline">
  </div>
  <div class="form-group">
    <label for="max_date">Calendar end</label><br/>
    <input data-provide="datepicker-inline">
  </div>
  <p /><hr /><p />
  <div class="form-group">
    <label for="start_date">Point of view</label><br />
    <label class="radio-inline">
      <input type="radio" name="pov" id="pov_2" value="general"> general
    </label>
    <label class="radio-inline">
      <input type="radio" name="pov" id="pov_1" value="subjective"> subjective
    </label>
    <label class="radio-inline">
      <input type="radio" name="pov" id="pov_3" value="filtered"> filtered
    </label>
  </div>
  <div class="form-group" id="people"></div>
  <p /><hr /><p />
  <button type="submit" id="submit" class="btn btn-default">Update</button>
</div>
<script id="people_select-template" type="text/x-handlebars-template">	
    <label for="min_scale">POV Owner</label><br/>
    <select id="pov_owner" name="pov_owner">
      {{#each people}}
      <option selected value="{{ this }}">{{ this }}</option>
      {{/each}}
    </select>
</script>
